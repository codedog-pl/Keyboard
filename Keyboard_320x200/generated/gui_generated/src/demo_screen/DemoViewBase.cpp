/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/demo_screen/DemoViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

DemoViewBase::DemoViewBase() :
    flexButtonCallback(this, &DemoViewBase::flexButtonCallbackHandler),
    keyboardCanceledCallback(this, &DemoViewBase::keyboardCanceledCallbackHandler),
    keyboardAppliedCallback(this, &DemoViewBase::keyboardAppliedCallbackHandler),
    keyboardKeyPressedCallback(this, &DemoViewBase::keyboardKeyPressedCallbackHandler),
    keyboardCharacterTypedCallback(this, &DemoViewBase::keyboardCharacterTypedCallbackHandler)
{
    __background.setPosition(0, 0, 320, 200);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(__background);

    image1.setXY(0, 0);
    image1.setBitmap(touchgfx::Bitmap(BITMAP_LIGHT_THEME_IMAGES_BACKGROUNDS_320X240_SHATTERED_RAIN_ID));
    add(image1);

    content.setPosition(0, 0, 320, 176);
    label1.setXY(33, 42);
    label1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    label1.setLinespacing(0);
    label1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_JTTP));
    content.add(label1);

    line1.setBoxWithBorderPosition(0, 0, 254, 31);
    line1.setBorderSize(1);
    line1.setBoxWithBorderColors(touchgfx::Color::getColorFromRGB(255, 255, 255), touchgfx::Color::getColorFromRGB(204, 255, 255), touchgfx::Color::getColorFromRGB(221, 221, 221), touchgfx::Color::getColorFromRGB(153, 204, 204));
    line1.setWildcardText(TypedText(T___SINGLEUSE_8TUL));
    Unicode::snprintf(line1Buffer, LINE1_SIZE, "%s", TypedText(T___SINGLEUSE_8I5Z).getText());
    line1.setWildcardTextBuffer(line1Buffer);
    line1.setWildcardTextPosition(6, 3, 254, 31);
    line1.setWildcardTextColors(touchgfx::Color::getColorFromRGB(68, 102, 136), touchgfx::Color::getColorFromRGB(68, 102, 136));
    line1.setAction(flexButtonCallback);
    line1.setPosition(33, 55, 254, 31);
    content.add(line1);

    label2.setXY(33, 90);
    label2.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    label2.setLinespacing(0);
    label2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_DVM4));
    content.add(label2);

    line2.setBoxWithBorderPosition(0, 0, 254, 31);
    line2.setBorderSize(1);
    line2.setBoxWithBorderColors(touchgfx::Color::getColorFromRGB(255, 255, 255), touchgfx::Color::getColorFromRGB(204, 255, 255), touchgfx::Color::getColorFromRGB(221, 221, 221), touchgfx::Color::getColorFromRGB(153, 204, 204));
    line2.setWildcardText(TypedText(T___SINGLEUSE_UTDG));
    Unicode::snprintf(line2Buffer, LINE2_SIZE, "%s", TypedText(T___SINGLEUSE_SQYA).getText());
    line2.setWildcardTextBuffer(line2Buffer);
    line2.setWildcardTextPosition(6, 3, 254, 31);
    line2.setWildcardTextColors(touchgfx::Color::getColorFromRGB(68, 102, 136), touchgfx::Color::getColorFromRGB(68, 102, 136));
    line2.setAction(flexButtonCallback);
    line2.setPosition(33, 103, 254, 31);
    content.add(line2);

    add(content);

    footer.setPosition(0, 176, 320, 24);
    title.setXY(24, 0);
    title.setColor(touchgfx::Color::getColorFromRGB(0, 153, 170));
    title.setLinespacing(0);
    title.setTypedText(touchgfx::TypedText(T___SINGLEUSE_KQIQ));
    footer.add(title);

    add(footer);

    keyboard.setXY(0, 0);
    keyboard.setVisible(false);
    keyboard.setCanceledCallback(keyboardCanceledCallback);
    keyboard.setAppliedCallback(keyboardAppliedCallback);
    keyboard.setKeyPressedCallback(keyboardKeyPressedCallback);
    keyboard.setCharacterTypedCallback(keyboardCharacterTypedCallback);
    add(keyboard);
}

DemoViewBase::~DemoViewBase()
{

}

void DemoViewBase::setupScreen()
{
    keyboard.initialize();
}

void DemoViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
    if (&src == &line1)
    {
        //Line1Click
        //When line1 clicked call virtual function
        //Call line1Edit
        line1Edit();
    }
    if (&src == &line2)
    {
        //Line2Click
        //When line2 clicked call virtual function
        //Call line2Edit
        line2Edit();
    }
}

void DemoViewBase::keyboardCanceledCallbackHandler()
{
    //KeyboardCancel
    //When keyboard canceled call virtual function
    //Call editCancel
    editCancel();
}

void DemoViewBase::keyboardAppliedCallbackHandler()
{
    //KeyboardApply
    //When keyboard applied call virtual function
    //Call editApply
    editApply();
}

void DemoViewBase::keyboardKeyPressedCallbackHandler()
{
    //KeyboardKeyPress
    //When keyboard keyPressed call virtual function
    //Call keyPressed
    keyPressed();
}

void DemoViewBase::keyboardCharacterTypedCallbackHandler(Unicode::UnicodeChar value)
{
    //KeyboardCharacterType
    //When keyboard characterTyped call virtual function
    //Call characterTyped
    characterTyped(value);
}
